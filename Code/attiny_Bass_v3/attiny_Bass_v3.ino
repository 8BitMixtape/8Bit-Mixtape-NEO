// ######################## Clock 16 Mhz intern ############################################

#include <avr/pgmspace.h>
#include "neolib.h"

uint8_t sync = 0;
uint8_t wave = 1;

bool full = true;

uint8_t uSteps = 192;                                // microsteps in one octave
unsigned int Acc = 255;
unsigned int Acc2 = 255;
//const uint8_t vol = 255;
unsigned int note = 214;
unsigned int baseNote = 288;
unsigned int note2, type;
bool gateOpen;

//


const unsigned int tunes1345steps[] PROGMEM = {
  54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57,   // tempered 12 tune steps on left column
  57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 60, 60,    // others are used as microsteps for detune
  60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 63,
  64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67,
  68, 68, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71,
  72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 76,
  76, 76, 76, 77, 77, 77, 77, 78, 78, 78, 79, 79, 79, 79, 80, 80,
  80, 81, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 84, 85,
  85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 89, 90,
  90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95,
  95, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101,
  101, 102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106, 106, 107,   // here the first octave ends
  107, 108, 108, 108, 109, 109, 110, 110, 110, 111, 111, 112, 112, 112, 113, 113,
  114, 114, 114, 115, 115, 116, 116, 116, 117, 117, 118, 118, 119, 119, 119, 120,
  120, 121, 121, 122, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127,
  127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135,
  135, 136, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 142, 142, 143,
  143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151,
  152, 152, 153, 153, 154, 154, 155, 155, 156, 157, 157, 158, 158, 159, 159, 160,
  161, 161, 162, 162, 163, 163, 164, 165, 165, 166, 166, 167, 168, 168, 169, 169,
  170, 171, 171, 172, 173, 173, 174, 174, 175, 176, 176, 177, 178, 178, 179, 180,
  180, 181, 182, 182, 183, 184, 184, 185, 186, 186, 187, 188, 188, 189, 190, 190,
  191, 192, 192, 193, 194, 194, 195, 196, 197, 197, 198, 199, 199, 200, 201, 202,
  202, 203, 204, 204, 205, 206, 207, 207, 208, 209, 210, 210, 211, 212, 213, 214,
  214, 215, 216, 217, 217, 218, 219, 220, 221, 221, 222, 223, 224, 225, 225, 226,
  227, 228, 229, 230, 230, 231, 232, 233, 234, 235, 235, 236, 237, 238, 239, 240,
  241, 241, 242, 243, 244, 245, 246, 247, 248, 249, 249, 250, 251, 252, 253, 254,
  255, 256, 257, 258, 259, 260, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
  270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
  286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302,
  303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320,
  321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339,
  340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359,
  360, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 381,
  382, 383, 385, 386, 387, 389, 390, 392, 393, 394, 396, 397, 399, 400, 402, 403,
  405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 419, 421, 423, 424, 426, 427,
  429, 430, 432, 433, 435, 436, 438, 440, 441, 443, 444, 446, 448, 449, 451, 452,
  454, 456, 457, 459, 461, 462, 464, 466, 467, 469, 471, 473, 474, 476, 478, 479,
  481, 483, 485, 486, 488, 490, 492, 493, 495, 497, 499, 501, 502, 504, 506, 508,
  510, 512, 513, 515, 517, 519, 521, 523, 525, 527, 528, 530, 532, 534, 536, 538,
  540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570,
  572, 574, 576, 578, 580, 583, 585, 587, 589, 591, 593, 595, 598, 600, 602, 604,
  606, 608, 611, 613, 615, 617, 619, 622, 624, 626, 628, 631, 633, 635, 638, 640,
  642, 645, 647, 649, 652, 654, 656, 659, 661, 663, 666, 668, 671, 673, 676, 678,
  680, 683, 685, 688, 690, 693, 695, 698, 700, 703, 705, 708, 711, 713, 716, 718,
  721, 724, 726, 729, 731, 734, 737, 739, 742, 745, 747, 750, 753, 756, 758, 761,
  764, 767, 769, 772, 775, 778, 780, 783, 786, 789, 792, 795, 798, 800, 803, 806,
  809, 812, 815, 818, 821, 824, 827, 830, 833, 836, 839, 842, 845, 848, 851, 854,
  857, 860, 864, 867, 870, 873, 876, 879, 882, 886, 889, 892, 895, 898, 902, 905,
  908, 912, 915, 918, 921, 925, 928, 932, 935, 938, 942, 945, 948, 952, 955, 959,
  962, 966, 969, 973, 976, 980, 983, 987, 990, 994, 998, 1001, 1005, 1009, 1012, 1016,
  1020, 1023, 1027, 1031, 1034, 1038, 1042, 1046, 1049, 1053, 1057, 1061, 1065, 1068, 1072, 1076,
  1080, 1084, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1128, 1132, 1136, 1140,
  1144, 1148, 1153, 1157, 1161, 1165, 1169, 1174, 1178, 1182, 1186, 1191, 1195, 1199, 1204, 1208,
  1212, 1217, 1221, 1226, 1230, 1234, 1239, 1243, 1248, 1252, 1257, 1262, 1266, 1271, 1275, 1280,
  1284, 1289, 1294, 1298, 1303, 1308, 1313, 1317, 1322, 1327, 1332, 1337, 1341, 1346, 1351, 1356,
  1361, 1366, 1371, 1376, 1381, 1386, 1391, 1396, 1401, 1406, 1411, 1416, 1421, 1426, 1431, 1437,
  1442, 1447, 1452, 1457, 1463, 1468, 1473, 1479, 1484, 1489, 1495, 1500, 1506, 1511, 1517, 1522,
  1528, 1533, 1539, 1544, 1550, 1555, 1561, 1567, 1572, 1578, 1584, 1589, 1595, 1601, 1607, 1613,
  1618, 1624, 1630, 1636, 1642, 1648, 1654, 1660, 1666, 1672, 1678, 1684, 1690, 1696, 1702, 1708,
  1715, 1721, 1727, 1733, 1740, 1746, 1752, 1758, 1765, 1771, 1778, 1784, 1791, 1797, 1803, 1810,
  1817, 1823, 1830, 1836, 1843, 1850, 1856, 1863, 1870, 1877, 1883, 1890, 1897, 1904, 1911, 1918,
  1925, 1932, 1939, 1946, 1953, 1960, 1967, 1974, 1981, 1988, 1995, 2003, 2010, 2017, 2024, 2032,
  2039, 2046, 2054, 2061, 2069, 2076, 2084, 2091, 2099, 2106, 2114, 2122, 2129, 2137, 2145, 2152,
  2160, 2168, 2176, 2184, 2192, 2200, 2208, 2216, 2224, 2232, 2240, 2248, 2256, 2264, 2272, 2280,
  2289, 2297, 2305, 2314, 2322, 2330, 2339, 2347, 2356, 2364, 2373, 2381, 2390, 2399, 2407, 2416,
  2425, 2434, 2442, 2451, 2460, 2469, 2478, 2487, 2496, 2505, 2514, 2523, 2532, 2541, 2550, 2560,
  2569, 2578, 2588, 2597, 2606, 2616, 2625, 2635, 2644, 2654, 2663, 2673, 2683, 2692, 2702, 2712,
  2722, 2732, 2741, 2751, 2761, 2771, 2781, 2791, 2801, 2812, 2822, 2832, 2842, 2853, 2863, 2873,
  2884, 2894, 2904, 2915, 2926, 2936, 2947, 2957, 2968, 2979, 2990, 3000, 3011, 3022, 3033, 3044,
  3055, 3066, 3077, 3088, 3099, 3111, 3122, 3133, 3145, 3156, 3167, 3179, 3190, 3202, 3213, 3225,
  3237, 3248, 3260, 3272, 3284, 3296, 3308, 3320, 3332, 3344, 3356, 3368, 3380, 3392, 3405, 3417,
  3429, 3442, 3454, 3467, 3479, 3492, 3504, 3517, 3530, 3542, 3555, 3568, 3581, 3594, 3607, 3620,
  3633, 3646, 3659, 3673, 3686, 3699, 3713, 3726, 3740, 3753, 3767, 3780, 3794, 3808, 3821, 3835,
  3849, 3863, 3877, 3891, 3905, 3919, 3933, 3948, 3962, 3976, 3991, 4005, 4020, 4034, 4049, 4063,
  4078, 4093, 4108, 4122, 4137, 4152, 4167, 4182, 4197, 4213, 4228, 4243, 4259, 4274, 4289, 4305,
  4320, 4336, 4352, 4368, 4383, 4399, 4415, 4431, 4447, 4463, 4479, 4496, 4512, 4528, 4544, 4561,
  4577, 4594, 4611, 4627, 4644, 4661, 4678, 4695, 4712, 4729, 4746, 4763, 4780, 4797, 4815, 4832,
  4850, 4867, 4885, 4902, 4920, 4938, 4956, 4974, 4992, 5010, 5028, 5046, 5064, 5083, 5101, 5119,
  5138, 5157, 5175, 5194, 5213, 5232, 5250, 5269, 5289, 5308, 5327, 5346, 5365, 5385, 5404, 5424,
  5443, 5463, 5483, 5503, 5523, 5543, 5563, 5583, 5603, 5623, 5644, 5664, 5684, 5705, 5726, 5746,
  5767, 5788, 5809, 5830, 5851, 5872, 5893, 5915, 5936, 5958, 5979, 6001, 6023, 6044, 6066, 6088,
  6110, 6132, 6154, 6177, 6199, 6221, 6244, 6266, 6289, 6312, 6335, 6358, 6381, 6404, 6427, 6450,
  6473, 6497, 6520, 6544, 6568, 6591, 6615, 6639, 6663, 6687, 6711, 6736, 6760, 6784, 6809, 6834,
  6858
};

const byte sine256[] PROGMEM = { // sine wavetable
  0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 40, 42, 44, 47, 49, 52, 54, 57, 59, 62, 65, 67, 70, 73, 76, 79, 82, 85, 88, 90, 93, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 128,
  128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 162, 165, 167, 170, 173, 176, 179, 182, 185, 188, 190, 193, 196, 198, 201, 203, 206, 208, 211, 213, 215, 218, 220, 222, 224, 226, 228, 230, 232, 234, 235, 237, 238, 240, 241, 243, 244, 245, 246,
  248, 249, 250, 250, 251, 252, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 251, 250, 250, 249, 248, 246, 245, 244, 243, 241, 240, 238, 237, 235, 234, 232, 230, 228, 226, 224, 222, 220, 218, 215, 213, 211,
  208, 206, 203, 201, 198, 196, 193, 190, 188, 185, 182, 179, 176, 173, 170, 167, 165, 162, 158, 155, 152, 149, 146, 143, 140, 137, 134, 131, 128, 124, 121, 118, 115, 112, 109, 106, 103, 100, 97, 93, 90, 88, 85, 82, 79, 76, 73, 70, 67, 65,
  62, 59, 57, 54, 52, 49, 47, 44, 42, 40, 37, 35, 33, 31, 29, 27, 25, 23, 21, 20, 18, 17, 15, 14, 12, 11, 10, 9, 7, 6, 5, 5, 4, 3, 2, 2, 1, 1, 1, 0
};

void setup() {
  
  OSCCAL += 3;                            // Oscillator calibration

  // Enable 64 MHz PLL and use as source for Timer1
  PLLCSR = 1 << PCKE | 1 << PLLE;

  // Set up Timer/Counter1 for PWM output
  TIMSK = 0;                                          // Timer interrupts OFF
  TCCR1 = 1 << PWM1A | 2 << COM1A0 | 1 << CS10;       // PWM OCR1A, clear on match, 1:1 prescale
  pinMode(1, OUTPUT);                                 // Enable PWM output pin

  // Set up Timer/Counter0 for interrupt to output samples.
  TCCR0A = 3 << WGM00;                                // Fast PWM
  TCCR0B = 1 << WGM02 | 2 << CS00;                    // 1/8 prescale
  TIMSK = 1 << OCIE0A;                                // Enable compare match, disable overflow
  OCR0A = 199;                                         // Divide by 400
  pinMode(0, OUTPUT);
  neobegin();
  //setColorAllPixel(colorWheel(220));
  //pixels.show();
}

void loop() {
    
  uint8_t b = wasButtonPressed();
  
  if( b == BUTTON_LEFT                )   type--   ;
  if( b == BUTTON_RIGHT               )   type++   ;  

  type   &= 0b00000011; // prevent out of range

  gateOpen = 1;
  int16_t lp = getPoti( POTI_RIGHT );   // range 0..1023
  int16_t rp = getPoti( POTI_LEFT );    // range 0..255

  //setColorAllPixel(colorWheel(220));
  //pixels.setPixelColor( 2, COLOR_GREEN );
  //pixels.show();

  baseNote = (map(lp, 0, 1023, 12, 72) << 4) + uSteps;
  note = pgm_read_word(&tunes1345steps[baseNote]);

  int detune = map(rp, 1023, 0, 0, uSteps);
  if (detune == 0) {
    note2 = note >> 1;
  } else {
    note2 = pgm_read_word(&tunes1345steps[baseNote + detune - uSteps]);
  }

}


ISR(TIMER0_COMPA_vect) {

  if (gateOpen) {
 
    Acc = Acc + note;
    Acc2 = Acc2 + note2;


    switch (type) {

      case 0:                                         // Square

        int temp, temp2;
        OCR1A = ((((Acc >> 8) & 0x80) + ((Acc2 >> 8) & 0x80)) * 100) >> 8;
        break;

      case 1:                                         // Ramp Up

        OCR1A = (((Acc >> 9) + (Acc2 >> 9)) * 130) >> 8;
        break;

      case 2:                                         // Triangle

        signed char Temp, Mask, Temp2, Mask2;
        Temp = Acc >> 8;
        Mask = Temp >> 7;
        Temp2 = Acc2 >> 8;
        Mask2 = Temp2 >> 7;
        OCR1A = (((Temp ^ Mask) + (Temp2 ^ Mask2)) * 210) >> 8 ;
        break;

      case 3:                                         // Sinus

        OCR1A = (((pgm_read_byte(&sine256[Acc >> 8]) + pgm_read_byte(&sine256[Acc2 >> 8])) >> 1) * 255) >> 8;
        break;

    }
  }
}
